apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.github.dcendents.android-maven'
group = rootProject.ext.group

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "de.markusressel.kutepreferences"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        setProperty("archivesBaseName", "KutePreferences_v${versionName}_(${versionCode})")

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(':core')
    implementation project(':boolean')
    implementation project(':color')
    implementation project(':date')
    implementation project(':number')
    implementation project(':selection')
    implementation project(':text')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "androidx.appcompat:appcompat:$androidKtxVersion"

    // Android KTX

    implementation "androidx.core:core-ktx:$androidKtxVersion"
//    implementation "androidx.fragment:fragment-ktx:$androidKtxVersion"
//    implementation "androidx.collection:collection-ktx:$androidKtxVersion"

    compileOnly "org.glassfish:javax.annotation:$javaxAnnotationVersion"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"
    // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$dagger2Version"
    implementation "com.google.dagger:dagger-android:$dagger2Version"
    implementation "com.google.dagger:dagger-android-support:$dagger2Version"

    //the core iconcis library (without any widgets)
    implementation "com.mikepenz:iconics-core:${iconicsVersion}@aar"
    //this adds all ui view widgets (IconicsButton, IconicsImageView, ...)
    implementation "com.mikepenz:iconics-views:${iconicsVersion}@aar"
    implementation 'com.mikepenz:material-design-iconic-typeface:+@aar'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

configurations.all {
    resolutionStrategy.force "com.android.support:support-v4:$supportLibVersion"
    resolutionStrategy.force "com.android.support:appcompat-v7:$supportLibVersion"
    resolutionStrategy.force "com.android.support:design:$supportLibVersion"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}